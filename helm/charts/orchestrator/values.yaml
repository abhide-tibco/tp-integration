# Default values for orchestrator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  orchestrator:
    data:
      DP_INTEGRATION_DEFAULT_SA: "dp-integration-default"
      DP_INTEGRATION_VOLUME_CLAIM: tp-integration-provider-store
      DP_INTEGRATION_REGISTRY: "reldocker.tibco.com"
      DP_INTEGRATION_LOGGING_DOCKER_IMAGE_TAG: "1.9.4"
      DP_INTEGRATION_NAMESPACE: "dp-integration-default"
      DP_INTEGRATION_VOLUME_PATH: "/data/"
      BUILD_NUMBER: ""

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
#resources:
#  requests:
#    cpu: 50m
#    memory: 128Mi
#  limits:
#    cpu: "2"
#    memory: 2048Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

probes:
  liveness:
    initialDelaySeconds: 3
    failureThreshold: 5
    periodSeconds: 5
    timeoutSeconds: 5

# -- Additional environment variables.
extraEnvVars: []
#  - name: NAME
#    value: value

# The name of ConfigMap containing additional environment variables.
extraEnvVarsCM: ""

# The name of Secret containing extra additional environment variables.
extraEnvVarsSecret: ""

# -- Extra volumeMounts for the integration services container.
# More info: `kubectl explain deployment.spec.template.spec.containers.volumeMounts`.
extraVolumeMounts: []
  # - name: example
  #   mountPath: /opt/tibco/example.txt
#   subPath: example.txt

# -- Extra volumes for the integration services container.
# More info: `kubectl explain deployment.spec.template.spec.volumes`.
extraVolumes: []
  # - name: example
  #   persistentVolumeClaim:
#     claimName: exampleClaim

# -- Additional init containers to add to the automationservices pod.
extraInitContainers: []
  # - name: dummy-init
  #   image: busybox
#   command: ['echo', "hey"]

config:
  DP_INTERNAL_URL: ""

volumes:
  orchestrator:
    persistentVolumeClaim:
      # -- If `true`, then a `PersistentVolumeClaim` (PVC) is created.
      create: false

      # -- Specifies the name of the `StorageClass` that to use for the `volumes.troubleshooting` PVC.
      storageClassName: ""

      # -- Specifies the standard K8s resource requests and/or limits for the `volumes.troubleshooting` PVC.
      resources:
        requests:
          storage: 2Gi

      # -- Specifies the name of the persistent volume to use for the `volumes.troubleshooting` PVC.
      volumeName:

    # -- When `persistentVolumeClaim.create` is `false`, then use this value to define an already-existing PVC.
    existingClaim: ""
